Assignment 4 readme File

------------------------------------------------------------------------
Student 1: What is your name?

Aidan Walsh

------------------------------------------------------------------------
Student 2: What is your name?

Konstantin Howard

------------------------------------------------------------------------
Student 1: What authorized sources of information did you use to
complete the assignment? COPY THE LIST of authorized sources of
information given in the "Policies" web page (also available on armlab
in the file ~cos217/AuthorizedSourcesList ) to this section of the
readme file, and edit it as appropriate.

The course's lectures.

The course's precepts.

The course's website.
------------------------------------------------------------------------
Student 2: What authorized sources of information did you use to
complete the assignment? COPY THE LIST of authorized sources of
information given in the "Policies" web page (also available on armlab
in the file ~cos217/AuthorizedSourcesList ) to this section of the
readme file, and edit it as appropriate.

The course's lectures.

The course's precepts.

The course's website.
------------------------------------------------------------------------
Student 1: What unauthorized sources of information did you use to
complete the assignment? List any unauthorized sources of information
that you used to complete the assignment, and describe how you used
them. The course "Policies" web page defines unauthorized sources of
information, and any source that you have used but not listed in the
authorized sources should be included here. Please note that using an
unauthorized source may trigger a course penalty, and depending on the
nature of the interaction, may additionally require the interaction
being reported to the Committee on Discipline. Write "None" if you used
no unauthorized sources of information.

None

------------------------------------------------------------------------
Student 2: What unauthorized sources of information did you use to
complete the assignment? List any unauthorized sources of information
that you used to complete the assignment, and describe how you used
them. The course "Policies" web page defines unauthorized sources of
information, and any source that you have used but not listed in the
authorized sources should be included here. Please note that using an
unauthorized source may trigger a course penalty, and depending on the
nature of the interaction, may additionally require the interaction
being reported to the Committee on Discipline. Write "None" if you used
no unauthorized sources of information.

None

------------------------------------------------------------------------
Student 1: What is your assessment of the assignment? Was it helpful?
Was it fun?

The assignment was very helpful - went quite smoothly because my partner
and I spent a good amount of time planning and looking at the code before
writing any code

------------------------------------------------------------------------
Student 2: What is your assessment of the assignment? Was it helpful?
Was it fun?

Somehow the least painful of the assignments I've done so far.

------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?

Sorry you have to read all this

------------------------------------------------------------------------
What warnings does splint generate for Part 2's checker, and what are
your disagreements with them? Copy the splint warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."



------------------------------------------------------------------------
What warnings does critTer generate on checkerDT.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."



------------------------------------------------------------------------
What warnings does splint generate on your Part 3 code, and what are
your disagreements with them? Copy the splint warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."

node.c: (in function Node_unlinkChild)
      node.c:273:47: Variable index used before definition

We created the size_t variable index because DynArray_bsearch requires
the pointer to such variable in which to store the index of the found 
or unfound entry (child). The variable is meaningless before we call 
that function and so we are not giving it any value. This is also done
in the provided nodeGood.c from Part 2.
------------------------------------------------------------------------
What warnings does critTer generate on your Part 3 code, and what are
your disagreements with them? Copy the critTer warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."

Checking node.c

	node.c: line 40: medium priority:
	Do you want to validate 'contents' through an assert?
   
	node.c: line 280: medium priority:
	Do you want to validate 'newContents' through an assert?

We cannot validate the contents of a file against anything as
a NULL contents is perfectly acceptable.

Checking ft.c

   ft.c: line 611: low priority: 
   A file should contain no more than 15 functions;
   this file contains 18 functions

   ft.c: line 78: medium priority:
   Do you want to validate 'contents' through an assert?

   ft.c: line 308: medium priority:
   Do you want to validate 'contents' through an assert?

   ft.c: line 426: medium priority:
   Do you want to validate 'newContents' through an assert?

   ft.c: line 610: low priority: 
   A source code file should contain fewer than 500 lines;
   this file contains 611 lines

   ft.c: line 49: low priority: 
   This area is deeply nested at level 4, consider refactoring

Once again, we cannot validate file contents against anything. We believe 
that our functions and lines of code that go over critTer's arbitrary limit
are essential to our program, as is the deeply nested code at line 49.
------------------------------------------------------------------------
For each of the first three faulty BDT implementations required by Step
1.5, identify the function where there is a bug. You do not have to
identify the bug itself, only its location, but note that this must be
the location of the underlying error, which is not necessarily where
the error manifests itself or is "noticed" by the client.


      Executable         Function with the underlying error
===============================================================
         ./bdtBad1        int BDT_insertPath(char* path)
---------------------------------------------------------------
         ./bdtBad2        static Node_T BDT_newNode(Node_T parent, char* dir)
---------------------------------------------------------------
         ./bdtBad3        static int BDT_unlinkParentToChild(Node_T parent, Node_T child)
===============================================================

------------------------------------------------------------------------
bdtBad4 and bdtBad5 are optional extra credit:

For bdtBad4, you do not have to find the bug and simply identifying
the bug is insufficient to earn the extra credit. Instead, indicate
what is the fundamental difference with trying to debug this
executable in gdb versus the first three (Hint: your answer should
have nothing to do with the program's code.):

Gdb is very helpful for fixing mistakes with algorithms or how
the code is implemented. We see, however, that the issue has to
do with memory which gdb won't be too helpful for (step, print,
next, run, etc. won't help). Thus, valgrind or meminfo will be
more helpful. We can see that we access the wrong information
or have memory issues with the output or strange characters
when we print to stderr. 

For bdtBad5, you do not have to find the bug and simply identifying
the bug is insufficient to earn the extra credit. Instead, discuss how
the program could crash within the DynArray module, which we promise is
correct, while executing a callback function that is, itself, correct:

The program could crash within the DynArray module while executing a
callback function that is correct if there is anything NULL or invalid
within the DynArray. This would cause there to be information stored
that cannot be retreived or accessed, and so may cause the program to
crash or seg fault. 


------------------------------------------------------------------------
What are your critiques of the given DT implementations, as
specified in Step 2.5?

Node.h:
	- comments don't mention that arguments must exist (implicit
	assert)
	- comments don't explain type returned such as Node_getPath:
	is path a string?
	- Node_getPath should explain the format of path - what is path?
	- The purpose of Node.h is to help with dt.c but some of these
	functions are never used: Node_addChild, Node_toString.
	- Node_addChild is redundant because we already have Node_create
	and Node_linkChild.
	- Node_toString redundant because it just returns the path,
	which Node_toPath already does, and it is never used in dt.c.
	- inconsistent argument naming. n, node1, node2, parent, child,
	are all used. Either use n1, n2, or node1, node2.
	- While compare helps, we already have Node_getPath so we can
	easily create a compare method if we need to in a c file so
	there is no use in having it in the interface. Just adds a
	method that won't be too helpful. 
nodeGood.c:
	- Node_unlinkChild and Node_linkChild use variable i which is
	uninformative. Should be renamed to be index or something better
	- inconsistent node names used (n, curr, parent ...). Should
	just stick to curr and parent for consistency and they are
	informative
	- Node_buildPath not needed. It is only ever called once and
	so only breaks up code. The less functions the better and so
	it only makes tracing the code more difficult.
	- Comments should be added within the functions to explain
	how they work
	- Node_hasChild is called only once so we can just place it into
	Node_linkChild to reduce the number of functions.
	- Binary search is called twice in a call to
	  linkChild when it can be called once.
	This will improve efficiency and reduce code.
	- if statements have "== TRUE" which is not needed
	- Node_destroy uses a node variable called c which is
	uninformative. Recommend renaming it "current".

dt.h:
	- DT_init should be placed first since it is a function that
	should be called first. This helps with readability and
	encourages proper function.
	- comments of functions should mention validation or imply
	validity of arguments (all path for this case)
dt.c:
	- No comments within functions to explain how they work
	- Inconsistent placement of static functions: DT_removePathFrom
	is not placed just before it is called. Either place all static
	functions just before they are called or all at the front in
	order of calling.
	- This c file is very long, look to trim it down (code bloating)
	- DT_rmPathAt not needed since we can just call this once in
	DT_rmPath
	- DT_rmPathFrom is only called a few times and is so short, it
	does not make things much easier - only adds more methods and
	to the clutter. So, it is not needed (this is a rather more
	subjective call). 
	- All we need is, for DT_destroy, to call Node_destroy with the
	Root as the argument. Having the separate removePathFrom is
	almost pointless since it is so short. (One could argue that
	having removePathFrom reduces coupling but it is used so few
	times that this is negligible). 
	- DT_insertRestOfPath only called once in DT_insertPath
	so it just adds an extra function to everything - so we can
	just put this into DT_insertPath (we keep it as two in ft.c
	because we insert both directories and files, so it does end up
	reducing code). 
	- DT_preOrderTraversal naming is uninformative and inconsistent.
	We use c for a loop variable when we have used i in the past.
	Node n should be renamed curr.
	- DT_linkParentToChild is exactly the same as the method in
	node.h and so is useless, especially since here, we return
	success/failure, then test success/failure. This is also only
	used twice in one method, so this method does not reduce
	coupling.
	- path should be validated for DT_strcatAccumulate and
	DT_strlenAccumulate 


------------------------------------------------------------------------
